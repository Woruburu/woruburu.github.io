{"version":3,"file":"index.08780741.js","sources":["../../src/Pages/Tags/index.tsx"],"sourcesContent":["import {\n  Anchor,\n  Button,\n  ButtonGroup,\n  Center,\n  Heading,\n  HStack,\n  SimpleGrid,\n  Stack,\n} from \"@hope-ui/solid\";\nimport Card from \"Components/Card\";\nimport ErrorAlert from \"Components/ErrorAlert\";\nimport LoadingSpinner from \"Components/LoadingSpinner\";\nimport SqljsServiceContext from \"Contexts/SqljsServiceContext\";\nimport { Link } from \"solid-app-router\";\nimport {\n  Component,\n  createEffect,\n  createSignal,\n  For,\n  Match,\n  Switch,\n  useContext,\n} from \"solid-js\";\n\ntype Tags = { [key: string]: { [key: string]: number } };\n\ntype TagsState =\n  | { type: \"Loading\" }\n  | { type: \"Loaded\"; tags: Tags }\n  | { type: \"Error\"; error: string };\n\nconst QuickJump: Component<{ tags: Tags }> = (props) => {\n  return (\n    <HStack gap={\"$2\"} flexWrap={\"wrap\"}>\n      <For each={Object.keys(props.tags).sort()}>\n        {(letter) => (\n          <Anchor target={\"_self\"} as={Link} href={`#${letter}`}>\n            <Button size={\"lg\"} type=\"button\">\n              {letter.toUpperCase()}\n            </Button>\n          </Anchor>\n        )}\n      </For>\n    </HStack>\n  );\n};\n\nconst TagGrid: Component<{ tags: Tags }> = (props) => {\n  return (\n    <SimpleGrid\n      columns={{ \"@initial\": 1, \"@sm\": 2, \"@md\": 3, \"@2xl\": 4 }}\n      gap=\"$6\"\n    >\n      <For each={Object.entries(props.tags).sort()}>\n        {([letter, tags]) => (\n          <Card>\n            <Stack direction={\"column\"} gap={\"$3\"}>\n              <Heading id={letter} level={1} size={\"2xl\"}>\n                <Center>{letter.toUpperCase()}</Center>\n              </Heading>\n              <For each={Object.entries(tags).sort()}>\n                {([tag, count]) => (\n                  <Anchor width={\"100%\"} as={Link} href={`/?tag=${tag}`}>\n                    <ButtonGroup width={\"100%\"} attached>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        css={{ whiteSpace: \"unset\" }}\n                        width={\"100%\"}\n                      >\n                        {tag}\n                      </Button>\n                      <Button type=\"button\">{count}</Button>\n                    </ButtonGroup>\n                  </Anchor>\n                )}\n              </For>\n            </Stack>\n          </Card>\n        )}\n      </For>\n    </SimpleGrid>\n  );\n};\n\nconst Tags: Component = () => {\n  const sql = useContext(SqljsServiceContext);\n  const [state, setState] = createSignal<TagsState>({\n    type: \"Loading\",\n  });\n\n  createEffect(() => {\n    if (sql.type === \"Loaded\") {\n      (async () => {\n        try {\n          const tags = await sql.service.getTags();\n          const letterGroups: Tags = {};\n          Object.entries(tags).forEach(([tag, count]) => {\n            const char = tag.charAt(0).match(/[a-z]/i) ? tag.charAt(0) : \"#\";\n            letterGroups[char] = {\n              ...(letterGroups[char] ?? {}),\n              [tag]: count,\n            };\n          });\n          setState({ type: \"Loaded\", tags: letterGroups });\n        } catch (error) {\n          setState({ type: \"Error\", error: (error as Error).toString() });\n        }\n      })();\n    }\n  });\n\n  const isError = () => {\n    const st = state();\n    return st.type === \"Error\" && st;\n  };\n\n  const isLoaded = () => {\n    const st = state();\n    return st.type === \"Loaded\" && st;\n  };\n\n  return (\n    <Stack direction={\"column\"} gap={\"$3\"}>\n      <Heading level={1} size={\"3xl\"}>\n        Tags\n      </Heading>\n      <Switch>\n        <Match when={state().type === \"Loading\"}>\n          <LoadingSpinner />\n        </Match>\n        <Match when={isError()}>\n          {(err) => (\n            <ErrorAlert\n              title={\"There was an error loading the prompt\"}\n              description={err.error}\n            />\n          )}\n        </Match>\n        <Match when={isLoaded()}>\n          {(loaded) => (\n            <>\n              <QuickJump tags={loaded.tags} />\n              <TagGrid tags={loaded.tags} />\n            </>\n          )}\n        </Match>\n      </Switch>\n    </Stack>\n  );\n};\n\nexport default Tags;\n"],"names":["QuickJump","props","_$createComponent","Object","keys","tags","sort","letter","Link","toUpperCase","TagGrid","entries","tag","count","whiteSpace","Tags","sql","useContext","SqljsServiceContext","state","setState","createSignal","type","createEffect","service","getTags","letterGroups","forEach","char","charAt","match","error","toString","isError","st","isLoaded","err","loaded"],"mappings":"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"}